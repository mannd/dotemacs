#+TITLE: David Mannâ€™s Emacs configuration
#+OPTIONS: toc:4 h:4
* Introduction
This is my new /literate/ Emacs configuration file.

** Default coding system

#+BEGIN_SRC emacs-lisp
  (set-default-coding-systems 'utf-8)	
#+END_SRC

** Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "David Mann, MD"
        user-mail-address "manndmd@gmail.com")
  ;; Paris, FR
  ;; (setq calendar-latitude 48.9)
  ;; (setq calendar-longitude 2.5)
  ;; (setq calendar-location-name "Paris, FR")
  ;; Parker, CO
  (setq calendar-latitude 39.4868360)
  (setq calendar-longitude -104.7450340)
  (setq calendar-location-name "Parker, CO")
#+END_SRC

** Configure =use-package=

~use-package~ is now part of emacs core, so no need to install it.

#+BEGIN_SRC emacs-lisp
  (use-package ert)
  (use-package diminish)
  (use-package bind-key)
    ;  (require 'ert)
     ; (require 'diminish)
     ; (require 'bind-key)
      ;; Ensure all packages are loaded
      (setq use-package-always-ensure t)
      (setq use-package-verbose t)
      ;; compile packages and use the newest version
      (use-package auto-compile
        :config (auto-compile-on-load-mode))
      (setq load-prefer-newer t)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

      ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
      ;; and `package-pinned-packages`. Most users will not need or want to do this.
      ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+END_SRC

** Custom file

Customizations get stored in their own file.  I have arranged this so that there is a separate init.el and configuration.org for Mac and Windows.  I considered pointing init.el to the same file, but thought it best to separate the two systems, other than certain shared files like the org files.

#+BEGIN_SRC emacs-lisp
  ;; customizations in its own file.  
  (setq custom-file (expand-file-name "custom.el" "~/.emacs.d"))
  ;; (if (eq system-type 'darwin)
  ;;   (setq custom-file (expand-file-name "custom.el" emacs-folder)))
  ;; (if (eq system-type 'windows-nt)
  ;;   (setq custom-file "/msys64/home/mannd/.emacs.d/custom.el"))
  (load custom-file)
#+END_SRC

** Define function key as hyper
Not sure if this only applies to macOS?

#+BEGIN_SRC emacs-lisp
    (setq ns-function-modifier 'hyper)
#+END_SRC

** Windmove
However S-<arrow> conflicts with calendar in org-mode.  So use the super key (Command in macOS) but only in macOS.  Windows uses the Windows key for other functions, so just don't use windmove with Windows.

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin) (windmove-default-keybindings 'super))
  ; But also retain these old keybindings I am used to.
  (global-set-key (kbd "C-x C-n") 'other-window)
  (global-set-key (kbd "C-x C-p") 'previous-multiframe-window)
#+END_SRC

** Printing

Printing is only set up for mac.

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
    (progn
        (add-to-list 'load-path "~/.emacs.d/elisp/mac-print-mode")
        (when (require 'mac-print-mode nil t)
        (mac-print-mode 1))))
        ;; (global-set-key (kbd "M-p") 'mac-print-buffer)))
#+END_SRC

** Get path right, takes it from the shell
Only used in macOS?

#+BEGIN_SRC emacs-lisp
      ;; new and improved way to make PATH and exec-path match bash config
      ;; exec-path-from-shell doesn't like using .bashrc for .bash_profile,
      ;; it looks like it would prefer using .profile, so below I
      ;; disable the error message that occurs.
      (use-package exec-path-from-shell
        :init
        (setq exec-path-from-shell-check-startup-files nil)
        :config
        (when (memq window-system '(mac ns))
          (exec-path-from-shell-initialize)))
 
#+END_SRC

** Org mode
*** Setup org mode
Set some global keys for org mode, set up my default org directory and tweak the appearance of org mode.

#+BEGIN_SRC emacs-lisp
  ;; org-mode setup
  ;; Standard org key bindings
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
  (setq org-agenda-include-diary t)
  ;; ~/org is a symlink to "~/Dropbox/org" for easy sharing
  (if (eq system-type 'darwin)
    (setq org-directory "~/org"))
  (if (eq system-type 'windows-nt)
    (setq org-directory "x:/org")) 
  (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
  ;; we hide stars by default even in buffers where we turn off
  (setq org-hide-leading-stars 'hidestars) ; just one star visible
  (setq org-startup-indented t)
  (setq org-hide-emphasis-markers t)


  (use-package org-appear
     :hook (org-mode . org-appear-mode))
#+END_SRC

**** TODO Consider moving org files to iCloud

*** Org agenda

Set up the org agenda.

#+BEGIN_SRC emacs-lisp
  ;; agenda files
  ;; Note org-gcal seems to not work with multiple calendars
  ;;(setq org-agenda-files '("~/org/inbox.org"))
  (setq org-agenda-files '("inbox.org"
                           "personal.org"
                           "home.org"
                           "epstudios.org"
                           "family.org"
                           "org.org"))
  ;; custom agenda commands
  ;; see https://stackoverflow.com/questions/31639086/emacs-org-mode-how-can-i-filter-on-tags-and-todo-status-simultaneously
  (setq org-agenda-custom-commands
        '(("p" "Projects" tags "project/TODO" nil)
          ("n" "Agenda and TODOs"
           ((agenda "")
            (alltodo "")))
          ("c" "Agenda and Projects"
           ((agenda "")
            (tags "project/TODO"
                  ((org-agenda-overriding-header "Projects")))))
          ))

  ;; change default iCalendar target (org.ics conflicts with org.org file)
  (setq org-icalendar-combined-agenda-file (expand-file-name "org-calendar.ics" org-directory))
  (setq org-icalendar-include-todo t)
#+END_SRC

*** More org stuff

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)
     (js . t)
     (shell . t)
     (java . t)))
  ;; file types for org-mode
  (add-to-list 'auto-mode-alist '("\\.\\(org_archive\\|txt\\)$" . org-mode))

  ;; refile targets
  (setq org-refile-targets
        '((org-agenda-files :maxlevel . 2)))

  ;; default tasks/notes/inbox file
  (setq org-default-notes-file (expand-file-name "inbox.org" org-directory))

  ;; stuck project tweak: projects are level 2 headlines, lacking NEXT action
  (setq org-stuck-projects '("+project/-DONE-CANCELLED" ("NEXT") nil ""))
  (setq org-tags-exclude-from-inheritance '("project"))
  ;; Capture templates - set up just for macOS
  (setq org-capture-templates
        '(("t" "todo" entry (file+headline "~/Dropbox/org/inbox.org" "Tasks")
           "* TODO %?\n%U\n%a\n")
          ("n" "note" entry (file+headline "~/Dropbox/org/inbox.org" "Notes")
           "* %? :NOTE:\n%U\n%a\n")
          ("j" "journal entry"
           entry (file+olp+datetree "~/Documents/journal.org.gpg")
           "**** %U %^{Title}\n%?")
          ("g" "German vocabulary"
           entry (file+headline "~/Dropbox/org/german.org" "German")
           "* <[%^{German word}]> :drill:\n :PROPERTIES:\n    :DRILL_CARD_TYPE: twosided\n    :END:\n** German\n %^{Detailed German word|%\\1}\n** English\n %^{English translation}")
          ("f" "French vocabulary"
           entry (file+headline "~/Dropbox/org/french.org" "French")
           "* <[%^{French word}]> :drill:\n :PROPERTIES:\n    :DRILL_CARD_TYPE: twosided\n    :END:\n** French\n %^{Detailed French word|%\\1}\n** English\n %^{English translation}")))

  ;; more TODO states
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
                (sequence "PENDING(p)" "WAITING(w@/!)" "HOLD(h@/!)" "SOMEDAY(s@/!)" "|" "CANCELLED(c@/!)"))))

  ;; pretty todo colors
  (setq org-todo-keyword-faces
        (quote (("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("PENDING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("SOMEDAY" :foreground "cyan" :weight bold))))

  ;; activate org mode speed commands
  (setq org-use-speed-commands t)

  ;; log stuff into drawer
  (setq org-log-done (quote time))
  (setq org-log-into-drawer "LOGBOOK")
  (setq org-clock-into-drawer 1)

  ;; avoid blank lines in org files
  (setq org-cycle-separator-lines 0)

  ;; supress footer in org html export files
  (setq org-html-postamble nil)

  ;; widen margins in Latex export
  (setq org-latex-packages-alist '(("margin=2cm" "geometry" nil)))
#+END_SRC

*** org-bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Have org capture use latin-9 input
This allows accented characters to be use.

#+BEGIN_SRC emacs-lisp
  (setq default-input-method "latin-9-prefix")
#+END_SRC

*** Images
Note that this requires emacs build with imagemagick.

#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

** Emacs server

#+BEGIN_SRC emacs-lisp
  ;; problem with emacsclient was invoking wrong emacsclient
  ;; (/usr/bin/emacsclient)
  ;; make sure the emacslient appropriate to the Emacs I am using is used
  ;; (setenv "EDITOR" (expand-file-name "bin/emacsclient" invocation-directory))
  
  ;; "/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_5/emacsclient")

  ;; set up emacs as server
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC

*** TODO See if setenv "EDITOR" can be used for Windows, or if it is even needed.

** Flycheck

#+BEGIN_SRC emacs-lisp
  ;; flycheck
  ;; note that flycheck C-c ! conflicts with org-mode, so using C-c !! in org-mode
  (use-package flycheck
    :config
    (add-to-list 'flycheck-checkers 'swift)
    (setq flycheck-swift-sdk-path "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk")
    (setq-default flycheck-emacs-lisp-load-path 'inherit)
    (global-flycheck-mode)
    (define-key flycheck-mode-map (kbd "C-c ! !") 'org-time-stamp-inactive))
    ;; flycheck-swift
  (use-package flycheck-swift
    :config
    (eval-after-load 'flycheck '(flycheck-swift-setup)))
#+END_SRC

*** TODO Change to Flymake/Eglot see https://joaotavora.github.io/eglot/#Quick-Start
Also see this Emacs simplification post, https://b.tuxes.uk/avoiding-emacs-bankruptcy.html

** Evil mode

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    ;; Make C-u in evil-mode works like in vim (page up)
    ;; must be set before package is loaded
    (setq evil-want-C-u-scroll t)
    (setq evil-undo-system 'undo-redo)
    :config
    ;; Make movement keys work respect visual lines
    (evil-mode 1)
    (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (setq evil-search-module 'evil-search)
    (setq-default evil-cross-lines t)
    ;; git commit buffers start in insert mode
    (evil-set-initial-state 'git-commit-mode 'insert)
    ;; (evil-set-initial-state 'dired-mode 'normal)
    ;; (evil-set-initial-state 'image-dired-mode 'emacs)
    ;; (evil-set-initial-state 'image-dired-thumbnail-mode 'emacs)
    ;; (evil-set-initial-state 'eww-mode 'emacs)
    ;; (evil-set-initial-state 'cider-repl 'emacs)
    ;; (evil-set-initial-state 'cider-error 'emacs)
    ;; (evil-set-initial-state 'deft-mode 'emacs)
    ;; (evil-set-initial-state 'semantic-symref-results-mode 'emacs)
    (evil-set-initial-state 'ledger-reconcile-mode 'emacs)
    ;; (add-to-list 'evil-emacs-state-modes 'forecast-mode)
    (setq-default evil-cross-lines t))

  ;; tries to apply evil mode to most non-text buffers
  (use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

  ;; use evil-matchit to match tags
  (use-package evil-matchit
    :config
    (global-evil-matchit-mode 1))

  ;; implement number functions
  (use-package evil-numbers
    :init
    (define-key evil-normal-state-map (kbd "C-=") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C--") 'evil-numbers/dec-at-pt)) 

  ;; evil-org
  (use-package evil-org
    :after (org)
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
          (lambda ()
            (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

#+END_SRC

** Dired
Tweak dired.  

#+BEGIN_SRC emacs-lisp
  (use-package dired
  :ensure nil
  :commands (dired)
  :hook
  ((dired-mode . dired-hide-details-mode)
   (dired-mode . hl-line-mode))
  :config
  ;; (setq dired-recursive-copies 'always)
  ;; (setq dired-recursive-deletes 'always)
  ;; (setq delete-by-moving-to-trash t)
  (setq dired-dwim-target t)
  (put 'dired-find-alternate-file 'disabled nil)
  (add-hook 'dired-mode #'dired-hide-details-mode))
#+END_SRC

** Magit
Install Magit from nongnu repository using package manager.

#+BEGIN_SRC emacs-lisp
    ;; Magit
    (use-package magit)

    (use-package magit-gitflow
      :after magit
      :config (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))
#+END_SRC

** TODO fix paths for windows Register shortcuts

#+BEGIN_SRC emacs-lisp
  ;; provide shortcut registers to files
  (set-register ?e '(file . "~/.emacs.d/init.el"))
  (set-register ?c '(file . "~/.emacs.d/configuration.org"))
#+END_SRC

** Themes
I am satisfied with the modus themes, but many doom themes are good, as well as others.  In addition, https://protesilaos.com/ has standard-themes and ef-themes, which seem pretty nice too.

#+BEGIN_SRC emacs-lisp
  ;; pick a theme
  ;;(load-theme 'tsdh-light t)
  ;;(load-theme 'wombat t)
  ;;(load-theme 'leuven t) 
  ;;(load-theme 'dracula t)
  ;;(load-theme 'light-blue t)
  ;;(load-theme 'leuven t)
  (use-package modus-themes
    :ensure t
    :config
    (load-theme 'modus-vivendi-tinted))

  (when (member "Source Code Pro" (font-family-list))
    (if (eq system-type 'windows-nt) (set-frame-font "Source Code Pro-12" nil t))
    (if (eq system-type 'darwin) (set-frame-font "Source Code Pro-16" nil t)))

  (use-package doom-themes)

  (use-package standard-themes)

  (use-package ef-themes)

  (use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-height 15)
  (doom-modeline-major-mode-color-icon t))
#+END_SRC

** Nerd icons

#+begin_src emacs-lisp
  (use-package nerd-icons
  :ensure t)

(use-package nerd-icons-completion
  :ensure t
  :after marginalia
  :config
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  (use-package nerd-icons-dired
  :ensure t
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+end_src

** Tweak UI

Dump the toolbar and scrollbars, but keep the menu for discovery purposes, though I rarely look at it.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
#+END_SRC

Also get rid of splash screen, scratch screen message.  

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message "")
#+END_SRC

Handle backup files in their own directory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.saves"))
  kept-new-versions 10
  kept-old-versions 10
  version-control t
  ;; don't ask to delete old backup versions
  delete-old-versions t)
  ;; avoid problems with linked files by backing up by copying
  (setq backup-by-copying t)
#+END_SRC

Auto-revert mode reloads buffer if file changes on disk.  It is especially good if I am editing simultaneously with Emacs and an external editor, such as Xcode.

#+BEGIN_SRC emacs-lisp  
  (global-auto-revert-mode t)
#+END_SRC

Ring the silent bell.  Even that is annoying and maybe I should just can the bell entirely.

#+BEGIN_SRC emacs-lisp
  ;; Go ahead and ring the silent bell!
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)
#+END_SRC

Save history.

#+BEGIN_SRC emacs-lisp
  (savehist-mode t)
#+END_SRC

Tweak the mouse.

#+BEGIN_SRC emacs-lisp
  ;; try less jumpy trackpad scrolling
  (setq mouse-wheel-scroll-amount '(2 ((shift) . 1) ((control))))
  ;; try improving scrolling with trackpad
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control) . nil)))
#+END_SRC

Use iBuffer instead of regular buffer.

#+BEGIN_SRC emacs-lisp
  ;; iBuffer is better
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

Use abbrev mode.

#+BEGIN_SRC emacs-lisp
  ;; abbrev mode
  (setq-default abbrev-mode t)
  (setq save-abbrevs t)
  (put 'upcase-region 'disabled nil)
#+END_SRC

Make title fancier.

#+BEGIN_SRC emacs-lisp
(setq-default frame-title-format '("Emacs - " user-login-name "@" system-name " - %b"))
#+END_SRC

** Winner mode
Undo and redo window configuration changes

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode 1))
#+END_SRC

** Beacon mode
Flashes cursor when scrolling or changing buffers

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :disabled
    :config (beacon-mode 1))
#+END_SRC

** Rainbow mode
Colorizes strings that represent colors.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
     :config 
     (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

** Deleted files go to trash

#+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash")
#+END_SRC

*** TODO do same for Windows

** Encryption

Enable encryption of gpg files

#+BEGIN_SRC emacs-lisp
  (require 'epa-file)
  (epa-file-enable)
#+END_SRC

** Markdown mode
Note that we use auto-fill-mode with Markdown.

#+BEGIN_SRC emacs-lisp
  ;; markdown-mode
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
    ("README\\.markdown\\'" . gfm-mode)
    ("\\.md\\'" . markdown-mode)
    ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc")
    (add-hook 'markdown-mode-hook 'auto-fill-mode)
    (electric-quote-mode -1))
#+END_SRC

** Ledger

#+BEGIN_SRC emacs-lisp
      (use-package ledger-mode
        :init 
        (setq ledger-clear-whole-transactions 1)
        ;; use company-mode for auto-completion with ledger
        :config  
        (add-hook 'ledger-mode-hook
                  (lambda ()
                    (company-mode t)))
        ;; (setq-local tab-always-indent 'complete)
        ;; (setq-local completion-cycle-threshold t)
        ;; (setq-local ledger-complete-in-steps t)))
        ;; emacs mode for ledger-report-mode
        (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
        ;; (set-face-attribute 'ledger-font-xact-highlight-face nil :background "#ff00ff")
        ;; Map some long but common accounts to function keys
        :bind 
        (:map ledger-mode-map 
              ("<f5>" . "Assets:Canvas:Checking")
              ("<f6>" . "Assets:TIAA:Checking")
              ("<f7>" . "Assets:BanquePopulaire:Checking")
              ("<f8>" . "â‚¬"))
        :mode ("\\.ledger$" "\\.dat$"))

      (use-package flycheck-ledger
         :after (ledger-mode))

      (use-package evil-ledger
        :after (ledger-mode)
        :config
        (setq evil-ledger-sort-key "S")
        (add-hook 'ledger-mode-hook #'evil-ledger-mode))
#+END_SRC

** Epub
Mode for reading ebooks.  Use 'n' and 'p' to change chapters.

#+BEGIN_SRC emacs-lisp
  (use-package nov
    :config  
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+END_SRC

** Vertico and friends
#+BEGIN_SRC emacs-lisp
   (use-package vertico
     :config
     (vertico-mode))

   (use-package marginalia
     :after (vertico)
     :config
     (marginalia-mode 1))

   (use-package orderless
   :ensure t
   :custom
   (completion-styles '(orderless basic ))
   (completion-category-overrides '((file (styles basic partial-completion)))))

   (use-package consult
     :bind (
       ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
       ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
       ("M-s r" . consult-ripgrep)               ;; rg is faster than grep
  ))

  (use-package consult-denote
    :after denote
    :config (consult-denote-mode))

#+END_SRC

** Consult-notes
Combine org-roam and denote notes

#+begin_src emacs-lisp
  (use-package consult-notes
    :config
    (setq consult-notes-file-dir-sources
       '(("Org Roam" ?r "~/Documents/org-roam")
         ("Denote" ?d "~/Documents/Notes"))))
  
#+end_src

** Helm - replaced by Vertico and friends, except for helm-bibtex.

** Projectile

#+BEGIN_SRC emacs-lisp
  ;; projectile
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))
#+END_SRC

*** TODO Consider replace with built-in emacs project support

** Auto-complete
We are using company mode instead of auto-complete for now.

** Misc packages

#+BEGIN_SRC emacs-lisp
  ;; some other packages
  (use-package olivetti)
  (use-package htmlize :defer t)
  (use-package cider :defer t)

  ;; Proper title capitalization function
  ;; Now just use Karls Voigt's improved version in ~/.emacs.d/elisp
  (use-package title-capitalization
    :load-path "elisp/")
#+END_SRC

** Programming
*** General

#+BEGIN_SRC emacs-lisp
  ;; compile buffer scrolls
  (setq compilation-scroll-output t)
#+END_SRC

*** Clojure

#+BEGIN_SRC emacs-lisp
  ;; Clojure stuff taken from https://github.com/flyingmachine/emacs-for-clojure/blob/master/init.el

  (defvar clojure-packages
    '(paredit
      clojure-mode
      clojure-mode-extra-font-locking
      smex
      rainbow-delimiters
      tagedit
      ))
  (dolist (p clojure-packages)
    (when (not (package-installed-p p))
      (package-install p)))
#+END_SRC

*** Lisp

#+BEGIN_SRC emacs-lisp
  ;; MIT-Scheme
  (setq scheme-program-name "mit-scheme")
  (setenv "MITSCHEME_LIBRARY_PATH" "/usr/local/lib/mit-scheme-c")

  ;; Common Lisp
  (setq inferior-lisp-program "clisp")
#+END_SRC

*** Swift

#+BEGIN_SRC emacs-lisp
    (use-package swift-mode)
    ;; xcode documentation -- Doesn't work
    ;; (use-package xcode-document-viewer
    ;;   :load-path "~/git/emacs-xcode-document-viewer"
    ;;   :init
    ;;   (use-package anything
    ;;     :ensure t)
    ;;   :config
    ;;   (setq xcdoc:document-path "/Applications/Xcode.app/Contents/Developer/Documentation/DocSets/com.apple.adc.documentation.docset")
    ;;   (setq xcdoc:open-w3m-other-buffer t))


    ;; fix for yas-snippet breaking term-mode TABS
    ;; see https://github.com/joaotavora/yasnippet/issues/289
    (add-hook 'term-mode-hook (lambda()
                                (yas-minor-mode -1)))

    ;; swift-mode to use company-mode by default
    (add-hook 'swift-mode-hook (lambda()
                                 (company-mode t)))
    ;; xcode-mode -- doesn't work with Xcode 8 yet
    ;; (use-package xcode-mode
    ;;     :load-path "~/git/xcode-mode"
    ;;    :ensure t)

    ;; figure out if .h files are C or Objective C
    ;; (add-to-list 'magic-mode-alist
    ;; 	     `(,(lambda ()
    ;; 		  (and (string= (file-name-extension buffer-file-name) "h")
    ;; 		       (re-search-forward "@\\<interface\\>"
    ;; 					  magic-mode-regexp-match-limit t)))
    ;; 	       . objc-mode))
  ;; From https://www.danielde.dev/blog/emacs-for-swift-development
  (defun xcode-build()
    (interactive)
    (shell-command-to-string
      "osascript -e 'tell application \"Xcode\"' -e 'set targetProject to active workspace document' -e 'build targetProject' -e 'end tell'"))
  (defun xcode-run()
    (interactive)
    (shell-command-to-string
      "osascript -e 'tell application \"Xcode\"' -e 'set targetProject to active workspace document' -e 'stop targetProject' -e 'run targetProject' -e 'end tell'"))
  (defun xcode-test()
    (interactive)
    (shell-command-to-string
      "osascript -e 'tell application \"Xcode\"' -e 'set targetProject to active workspace document' -e 'stop targetProject' -e 'test targetProject' -e 'end tell'"))
  (global-set-key (kbd "s-b") 'xcode-build)
  (global-set-key (kbd "s-r") 'xcode-run)
  (global-unset-key (kbd "s-u")) ;originally bound to revert-buffer
  (global-set-key (kbd "s-u") 'xcode-test)

  (defun xcode-open-current-file()
  (interactive)
  (shell-command-to-string
    (concat "open -a \"/Applications/Xcode.app\" " (shell-quote-argument (buffer-file-name)))))
  (global-set-key (kbd "C-c p x x") 'xcode-open-current-file)


#+END_SRC
*** Company mode

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (add-hook 'prog-mode-hook 'company-mode)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (setq company-transformers '(company-sort-by-occurrence)))

  ;; company-sourcekit for Swift programming
  (use-package company-sourcekit
    :if (eq system-type 'darwin)
    :config
    (add-to-list 'company-backends 'company-sourcekit))

  (defun my-company-after-completion-hook (&rest _ignored)
    (delete-trailing-whitespace))

  ;; or setq-local in a mode hook
  (setq company-after-completion-hook #'my-company-after-completion-hook)
#+END_SRC

** Deft
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :if (eq system-type 'darwin)
    :after (org org-roam)
    :bind
    ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
    (deft-use-filename-as-title t)
    (deft-default-extension "org")
    (deft-directory org-roam-directory))
#+END_SRC

** Org-roam

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :if (eq system-type 'darwin)
    :after (org)
    ;; :hook
    ;; (after-init . org-roam-mode)
    :init
    (if (eq system-type 'darwin)
        (setq org-roam-directory (file-truename "~/Documents/org-roam")))
    (if (eq system-type 'windows-nt)
        (setq org-roam-directory (file-truename "z:/Documents/org-roam")))
    ;(org-roam-setup)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
   :config
    (setq org-roam-capture-templates
          '(("d" "default" plain "%?" :target
              (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: ")
              :unnarrowed t)
            ("r" "bibliography reference" plain "%?"
             :target
             (file+head "references/${citekey}.org" "#+title: ${title}\n")
             :unnarrowed t)))
    (org-roam-db-autosync-enable)
    (setq org-roam-node-display-template
         (concat "${title} "
                 (propertize "${tags}" 'face 'org-tag))))

  (use-package org-roam-ui
    :if (eq system-type 'darwin)
    :after (org-roam)
    :no-require)
#+END_SRC

** Denote
An alternative to org-roam

#+begin_src emacs-lisp
  (use-package denote
    :hook (dired-mode . denote-dired-mode)
    :config
    (setq denote-directory (expand-file-name "~/Documents/Notes"))
    (denote-rename-buffer-mode 1))

  (defun dem/denote-open-denote-dir()
    "Open denote directory."
    (interactive)
    (dired denote-directory))

#+end_src

** Kotlin

#+BEGIN_SRC emacs-lisp
  (use-package kotlin-mode)
#+END_SRC
  
** TODO Citar - set up for Windows too

#+BEGIN_SRC emacs-lisp
  (use-package citar
    :if (eq system-type 'darwin)
    :after (org)
    :custom
    (org-cite-global-bibliography '("~/Documents/Bibtex/My Library.bib"))
    (org-cite-csl-styles-dir (expand-file-name "~/Zotero/styles/"))
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (org-cite-export-processors '((t . (csl "american-medical-association.csl"))))
    (citar-bibliography org-cite-global-bibliography)
    ;; optional: org-cite-insert is also bound to C-c C-x C-@
    :bind
    (:map org-mode-map :package org ("C-c C-b" . #'org-cite-insert)))

  (use-package citar-org-roam
    :after (citar org-roam org)
    :config (citar-org-roam-mode))
  #+END_SRC

** Helm-bibtex

#+BEGIN_SRC emacs-lisp
  (use-package helm-bibtex
    :if (eq system-type 'darwin)
    :config
    (setq bibtex-completion-bibliography '("~/Documents/Bibtex/My Library.bib"))
    (setq bibtex-completion-library-path '("~/Zotero/storage/"))
    (setq bibtex-completion-pdf-open-function 'helm-open-file-with-default-tool) 
    (setq bibtex-completion-notes-path "~/Documents/org-roam/")
    (setq bibtex-completion-pdf-field "File"))
#+END_SRC

** Org-roam-bibtex
#+BEGIN_SRC emacs-lisp
  (use-package org-roam-bibtex
    :if (eq system-type 'darwin)
    :after (org-roam helm-bibtex)
    :config
    (org-roam-bibtex-mode 1)
    (setq orb-insert-interface 'helm-bibtex)
    (setq orb-attached-file-extensions '("pdf" "epub")))
#+END_SRC

