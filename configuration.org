#+TITLE: David Mann’s Emacs configuration
#+OPTIONS: toc:4 h:4
* Introduction
This is my new /literate/ Emacs configuration file.  Work in Progress!  This file is loaded by init.el, which basically just does that (and wraps the whole process in timing code).
* Configuration
** Startup package system

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elisp/")
  ;; prevent loading packages twice after init.el is done
  (setq package-enable-at-startup nil)
  ;; set up package sources
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC
#+begin_src emacs-lisp
#+end_src
** Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "David Mann, MD"
        user-mail-address "manndmd@gmail.com")
  ;; Paris, FR
  ;; (setq calendar-latitude 48.9)
  ;; (setq calendar-longitude 2.5)
  ;; (setq calendar-location-name "Paris, FR")
  ;; Parker, CO
  (setq calendar-latitude 39.4868360)
  (setq calendar-longitude -104.7450340)
  (setq calendar-location-name "Parker, CO")
#+END_SRC

** Configure =use-package=

use-package must be setup early in the configuration.

#+BEGIN_SRC emacs-lisp
  (require 'ert)
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)
  ;; Ensure all packages are loaded
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)
  ;; compile packages and use the newest version
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

** Custom file

Customizations get stored in their own file.

#+BEGIN_SRC emacs-lisp
  ;; customizations in its own file
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

** Define hyper key as fn

#+BEGIN_SRC emacs-lisp
    (setq ns-function-modifier 'hyper)
#+END_SRC

** Printing

Printing is only set up for mac so far.

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
    (progn
        (add-to-list 'load-path "~/.emacs.d/elisp/mac-print-mode")
        (when (require 'mac-print-mode nil t)
        (mac-print-mode 1))
        ;; (global-set-key (kbd "M-p") 'mac-print-buffer)
    )
  )
#+END_SRC

** Minibuffer uses selected buffer input method
For entering those pesky accents in French, German, etc.

#+BEGIN_SRC emacs-lisp
  ;; (defun my-inherit-input-method ()
  ;;   "Inherit input method from `minibuffer-selected-window'."
  ;;   (let* ((win (minibuffer-selected-window))
  ;;          (buf (and win (window-buffer win))))
  ;;      (when buf
  ;;        (activate-input-method (buffer-local-value 'current-input-method buf)))))

  ;; (add-hook 'minibuffer-setup-hook #'my-inherit-input-method)
#+END_SRC
** Get path right

#+BEGIN_SRC emacs-lisp
      ;; new and improved way to make PATH and exec-path match bash config
      ;; exec-path-from-shell doesn't like using .bashrc for .bash_profile,
      ;; it looks like it would prefer using .profile, so below I
      ;; disable the error message that occurs.
      (use-package exec-path-from-shell
        :init
        (setq exec-path-from-shell-check-startup-files nil)
        :config
        (when (memq window-system '(mac ns))
          (exec-path-from-shell-initialize)))
 
#+END_SRC

** Org mode
*** Setup org mode

Set some global keys for org mode, set up my default org directory and tweak the appearance of org mode.

#+BEGIN_SRC emacs-lisp
  ;; org-mode setup
  ;; Standard org key bindings
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
  (setq org-agenda-include-diary t)
  ;; ~/org is a symlink to "~/Dropbox/org" for easy sharing
  (setq org-directory "~/org")
  ;; I like visual-line-mode as default for text, org
  (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
  ;; we hide stars by default even in buffers where we turn off
  (setq org-hide-leading-stars 'hidestars) ; just one star visible
  (setq org-startup-indented t)
  (setq org-hide-emphasis-markers t)
#+END_SRC

*** Org agenda

Set up the org agenda.

#+BEGIN_SRC emacs-lisp
  ;; agenda files
  ;; Note org-gcal seems to not work with multiple calendars
  ;;(setq org-agenda-files '("~/org/inbox.org"))
  (setq org-agenda-files '("~/org/inbox.org"
                           "~/org/personal.org"
                           "~/org/home.org"
                           "~/org/epstudios.org"
                           "~/org/family.org"
                           "~/org/org.org"))
  ;; custom agenda commands
  ;; see https://stackoverflow.com/questions/31639086/emacs-org-mode-how-can-i-filter-on-tags-and-todo-status-simultaneously
  (setq org-agenda-custom-commands
        '(("p" "Projects" tags "project/TODO" nil)
          ("n" "Agenda and TODOs"
           ((agenda "")
            (alltodo "")))
          ("c" "Agenda and Projects"
           ((agenda "")
            (tags "project/TODO"
                  ((org-agenda-overriding-header "Projects")))))
          ))

  ;; change default iCalendar target (org.ics conflicts with org.org file)
  (setq org-icalendar-combined-agenda-file "~/org/org-calendar.ics")
  (setq org-icalendar-include-todo t)
#+END_SRC

*** More org stuff

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)
     (js . t)
     (shell . t)
     (java . t)))
  ;; file types for org-mode
  (add-to-list 'auto-mode-alist '("\\.\\(org_archive\\|txt\\)$" . org-mode))

  ;; For mobile org -- I’ve switched to beorg on iOS
  ;;(setq org-mobile-inbox-for-pull "~/org/index.org")
  ;;(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
  ;;(setq org-mobile-files org-agenda-files)

  ;; refile targets
  (setq org-refile-targets
        '((org-agenda-files :maxlevel . 2)))

  ;; default tasks/notes/inbox file
  (setq org-default-notes-file "~/org/inbox.org")

  ;; stuck project tweak: projects are level 2 headlines, lacking NEXT action
  (setq org-stuck-projects '("+project/-DONE-CANCELLED" ("NEXT") nil ""))
  (setq org-tags-exclude-from-inheritance '("project"))
  ;; Capture templates
  (setq org-capture-templates
        '(("t" "todo" entry (file+headline "~/org/inbox.org" "Tasks")
           "* TODO %?\n%U\n%a\n")
          ("n" "note" entry (file+headline "~/org/inbox.org" "Notes")
           "* %? :NOTE:\n%U\n%a\n")
          ("j" "journal entry"
           entry (file+olp+datetree "~/Documents/journal.org.gpg")
           "**** %U %^{Title}\n%?")
          ("g" "German vocabulary"
           entry (file+headline "~/org/german.org" "German")
           "* <[%^{German word}]> :drill:\n :PROPERTIES:\n    :DRILL_CARD_TYPE: twosided\n    :END:\n** German\n %^{Detailed German word|%\\1}\n** English\n %^{English translation}")
          ("f" "French vocabulary"
           entry (file+headline "~/org/french.org" "French")
           "* <[%^{French word}]> :drill:\n :PROPERTIES:\n    :DRILL_CARD_TYPE: twosided\n    :END:\n** French\n %^{Detailed French word|%\\1}\n** English\n %^{English translation}")))

  ;; experiment with more TODO states
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
                (sequence "PENDING(p)" "WAITING(w@/!)" "HOLD(h@/!)" "SOMEDAY(s@/!)" "|" "CANCELLED(c@/!)"))))

  ;; we'll try making the colors prettier too
  (setq org-todo-keyword-faces
        (quote (("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("PENDING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("SOMEDAY" :foreground "cyan" :weight bold))))

  ;; activate org mode speed commands
  (setq org-use-speed-commands t)

  ;; log stuff into drawer
  (setq org-log-done (quote time))
  (setq org-log-into-drawer "LOGBOOK")
  (setq org-clock-into-drawer 1)

  ;; avoid blank lines in org files
  (setq org-cycle-separator-lines 0)

  ;; supress footer in org html export files
  (setq org-html-postamble nil)

  ;; widen margins in Latex export
  (setq org-latex-packages-alist '(("margin=2cm" "geometry" nil)))

#+END_SRC

*** org-pomodoro

#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro)
#+END_SRC

*** org-bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** org-drill

#+BEGIN_SRC emacs-lisp
(use-package org-drill)
#+END_SRC

*** Have org capture use latin-9 input

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 
  ;;           'helm-mode-hook 
  ;;   (lambda () (activate-input-method "latin-9-prefix")))
  (setq default-input-method "latin-9-prefix")
#+END_SRC
*** images
#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width nil)
#+END_SRC

** Org2blog

#+BEGIN_SRC emacs-lisp
  ;; (use-package org2blog)
  ;; (setq org2blog/wp-blog-alist
  ;;   `(("EP Studios"
  ;;      :url "https://epstudiossoftware.com/xmlrpc.php"
  ;;      :username ,(car (auth-source-user-and-password "epstudios.org"))
  ;;      :password ,(cadr (auth-source-user-and-password "epstudios.org")))))
#+END_SRC
** COMMENT Customized keybindings

#+BEGIN_SRC emacs-lisp
  (bind-key "C-+" 'text-scale-increase)   
  (bind-key "C--" 'text-scale-decrease)
#+END_SRC

** Emacs server

#+BEGIN_SRC emacs-lisp
  ;; problem with emacsclient was invoking wrong emacsclient
  ;; (/usr/bin/emacsclient)
  ;; make sure the emacslient appropriate to the Emacs I am using is used
  (setenv "EDITOR" (expand-file-name "bin/emacsclient" invocation-directory))
  ;; "/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_5/emacsclient")

  ;; set up emacs as server
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  ;; flycheck
  ;; note that flycheck C-c ! conflicts with org-mode
  (use-package flycheck
    :init
    (global-flycheck-mode)
    :config
    (add-to-list 'flycheck-checkers 'swift)
    (setq flycheck-swift-sdk-path "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk")
    (setq-default flycheck-emacs-lisp-load-path 'inherit)
    (define-key flycheck-mode-map (kbd "C-c ! !") 'org-time-stamp-inactive))
    ;; flycheck-swift
  (use-package flycheck-swift
    :config
    (eval-after-load 'flycheck '(flycheck-swift-setup)))
#+END_SRC

** Evil mode

#+BEGIN_SRC emacs-lisp
  ;; play with evil mode
  (use-package evil
    :init
    ;; c-u in evil-mode works like in vim (page up)
    ;; must be set before package is loaded
    (setq evil-want-C-u-scroll t)
    :config
    ;; Make movement keys work respect visual lines
    (evil-mode 1)
    (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (setq evil-search-module 'evil-search)
    (setq-default evil-cross-lines t)
    ;; git commit buffers start in insert mode
    (evil-set-initial-state 'git-commit-mode 'insert)
    (evil-set-initial-state 'dired-mode 'emacs)
    (evil-set-initial-state 'image-dired-mode 'emacs)
    (evil-set-initial-state 'image-dired-thumbnail-mode 'emacs)
    (evil-set-initial-state 'eww-mode 'emacs)
    (evil-set-initial-state 'cider-repl 'emacs)
    (evil-set-initial-state 'cider-error 'emacs)
    (evil-set-initial-state 'deft-mode 'emacs)
    (evil-set-initial-state 'semantic-symref-results-mode 'emacs)
    (add-to-list 'evil-emacs-state-modes 'forecast-mode)
    (setq-default evil-cross-lines t))

  ;; use evil-matchit to match tags
  (use-package evil-matchit
    :init
    (global-evil-matchit-mode 1))

  ;; implement number functions
  (use-package evil-numbers
    :init
    (define-key evil-normal-state-map (kbd "C-=") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C--") 'evil-numbers/dec-at-pt)) 

  ;; evil-org
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
          (lambda ()
            (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  ;; Magit
  (use-package magit
    :init
    (use-package magit-gitflow
      :init (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))
    (use-package with-editor
      :load-path "~/git/with-editor")
    (global-set-key (kbd "C-x g") 'magit-status)
    :config
    (with-eval-after-load 'info
      (info-initialize)
      (add-to-list 'Info-additional-directory-list
                   "~/git/magit/Documentation/")))

  ;; Magithub
  (use-package magithub
    :disabled t
    :load-path "~/git/magithub"
    :after magit
    :config (magithub-feature-autoinject t))
#+END_SRC

** Evernote

#+BEGIN_SRC emacs-lisp
;; evernote-mode - note requires ruby 1.9.3 (or later??)
;; disabled
(use-package evernote-mode
  :disabled t
  :config
  (setq evernote-ruby-command "/Users/mannd/.rvm/rubies/ruby-1.9.3-p547/bin/ruby")
  (setq evernote-username "manndmd@gmail.com")
  (setq exec-path (cons "/usr/local/bin" exec-path))
  (setq evernote-enml-formatter-command '("w3m" "-dump" "-I" "UTF8" "-O" "UTF8"))
  (global-set-key "\C-cec" #'evernote-create-note)
  (global-set-key "\C-ceo" 'evernote-open-note)
  (global-set-key "\C-ces" 'evernote-search-notes)
  (global-set-key "\C-ceS" 'evernote-do-saved-search)
  (global-set-key "\C-cew" 'evernote-write-note)
  (global-set-key "\C-cep" 'evernote-post-region)
  (global-set-key "\C-ceb" 'evernote-browser)
  (use-package org-evernote))
#+END_SRC

** Register shortcuts

#+BEGIN_SRC emacs-lisp
;; provide shortcut registers to files
(set-register ?e '(file . "~/.emacs.d/init.el"))
(set-register ?i '(file . "~/org/inbox.org"))
(set-register ?g '(file . "~/.emacs.d/gnus.el"))
(set-register ?c '(file . "~/.emacs.d/configuration.org"))
#+END_SRC

** Themes

#+BEGIN_SRC emacs-lisp
  ;; pick a theme
  ;;(load-theme 'tsdh-light t)
  ;;(load-theme 'wombat t)
  ;;(load-theme 'leuven t)
  ;;(load-theme 'dracula t)
  ;;(load-theme 'light-blue t)
  ;;(load-theme 'leuven t)

  ;; spacemacs light theme is nice!
  (use-package spacemacs-theme
  :disabled t
  :defer t
  :init
  (load-theme 'spacemacs-light t))

  ;; and so is this font...
  (when (member "Source Code Pro" (font-family-list))
       (set-frame-font "Source Code Pro-16" nil t))
   ;; (set-face-attribute 'default nil :height 140)

  (use-package spaceline
  :init
  (setq powerline-default-separator 'arrow-fade)
  :config
  (require 'spaceline-config)
  (spaceline-spacemacs-theme))

  (use-package doom-themes
  :config (load-theme 'doom-gruvbox-light t))
  
  (use-package leuven-theme
  :disabled t
  :config (load-theme 'leuven-dark t))

  (use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-height 15)
  (doom-modeline-major-mode-color-icon t))


  ;; Zen-burn
  (use-package zenburn-theme
  :disabled t
  :config
  (load-theme 'zenburn t t))

  ;; Modern color-themes
  ;; See https://github.com/emacs-jp/replace-colorthemes.
  ;; There are a lot more of these you could download.
  (use-package color-theme-modern
  :disabled t
  :config
  (load-theme 'midnight t t)
  (enable-theme 'midnight))
#+END_SRC

#+RESULTS:

** Tweak UI

Dump the toolbar and scrollbars, but keep the menu for discovery purposes.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  #+END_SRC

Also get rid of splash screen, scratch screen message.  

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message "")
#+END_SRC

Handle backup files in their own directory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.saves"))
  kept-new-versions 10
  kept-old-versions 10
  version-control t
  ;; don't ask to delete old backup versions
  delete-old-versions t)
  ;; avoid problems with linked files by backing up by copying
  (setq backup-by-copying t)
#+END_SRC

Auto-revert mode reloads buffer if file changes on disk.  It is especially good if I am editing simultaneously with Emacs and an external editor, such as Xcode.

#+BEGIN_SRC emacs-lisp  
  (global-auto-revert-mode t)
#+END_SRC

Ring the silent bell.  Even that is annoying and maybe I should just can the bell entirely.

#+BEGIN_SRC emacs-lisp
  ;; Go ahead and ring the silent bell!
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)
#+END_SRC

Save history.

#+BEGIN_SRC emacs-lisp
  (savehist-mode t)
#+END_SRC

Tweak the mouse.

#+BEGIN_SRC emacs-lisp
  ;; try less jumpy trackpad scrolling
  (setq mouse-wheel-scroll-amount '(2 ((shift) . 1) ((control))))
  ;; try improving scrolling with trackpad
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control) . nil)))
#+END_SRC

Use iBuffer instead of regular buffer.

#+BEGIN_SRC emacs-lisp
  ;; iBuffer is better
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

Tweak dired to open files in same buffer, not a new buffer.  Also make file sizes human readable.

#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
  (setq-default dired-listing-switches "-ahl")
#+END_SRC

Use abbrev mode.

#+BEGIN_SRC emacs-lisp
  ;; abbrev mode
  (setq-default abbrev-mode t)
  (setq save-abbrevs t)
  (put 'upcase-region 'disabled nil)

#+END_SRC

Fix info and fonts on my Windows system.

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
  (progn
    (info-initialize)
    (add-to-list 'Info-additional-directory-list "C:/Users/mannd/bin/emacs-24.5-bin-i686-mingw32/share/info")
    (add-to-list 'initial-frame-alist '(font . "DejaVu Sans Mono-12"))
    (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-12"))))
#+END_SRC

Make title fancier.

#+BEGIN_SRC emacs-lisp
(setq-default frame-title-format '("Emacs - " user-login-name "@" system-name " - %b"))
#+END_SRC

** Winner mode
Undo and redo window configuration changes

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode 1))
#+END_SRC

** Undo tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    (global-undo-tree-mode 1)
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-visualizer-timestamps t))
#+END_SRC

** Beacon mode
Flashes cursor when scrolling or changing buffers

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :init (beacon-mode 1))
#+END_SRC
** Rainbow mode

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
     :init 
     (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

** Deleted files go to trash

#+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash")
#+END_SRC

** Encryption

Enable encryption of gpg files

#+BEGIN_SRC emacs-lisp
  (require 'epa-file)
  (epa-file-enable)
#+END_SRC

** Markdown mode
Note that we use auto-fill-mode with Markdown.

#+BEGIN_SRC emacs-lisp
  ;; markdown-mode
  (use-package markdown-mode
    :load-path "~/git/markdown-mode"
    :mode (("README\\.md\\'" . gfm-mode)
    ("README\\.markdown\\'" . gfm-mode)
    ("\\.md\\'" . markdown-mode)
    ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc")
    (add-hook 'markdown-mode-hook 'auto-fill-mode)
    (electric-quote-mode -1))
#+END_SRC

** Ledger

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    ;:load-path "~/lisp"
    ;; C-c C-c clears whole transaction
    :init 
    (setq ledger-clear-whole-transactions 1)
    ;; use company-mode for auto-completion with ledger
    :config  
    (add-hook 'ledger-mode-hook (lambda() (company-mode t)))
    ;; emacs mode for ledger-report-mode
    (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
    ;; (set-face-attribute 'ledger-font-xact-highlight-face nil :background "#ff00ff")
    ;; Map some long but common accounts to function keys
    :bind 
    (:map ledger-mode-map 
    ("<f5>" . "Assets:Canvas:Checking")
    ("<f6>" . "Assets:TIAA:Checking")
    ("<f7>" . "Assets:BanquePopulaire:Checking")
    ("<f8>" . "€"))
    :mode ("\\.ledger$" "\\.dat$"))


    (use-package evil-ledger
      :after ledger-mode
      :config
      (setq evil-ledger-sort-key "S")
      (add-hook 'ledger-mode-hook #'evil-ledger-mode))
#+END_SRC

** Epub
#+BEGIN_SRC emacs-lisp
  (use-package nov
    :config  
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+END_SRC

** Gnus

#+BEGIN_SRC emacs-lisp
  ;; gnus
  (setq gnus-init-file "~/.emacs.d/gnus")
  (require 'nnir)
  ;; quit gnus automatically on exit emacs
  (defadvice save-buffers-kill-emacs (before rgb/gnus-exit)
    (gnus-group-exit))
  (add-hook 'gnus-started-hook
            (lambda () (ad-activate 'save-buffers-kill-emacs)))
  (add-hook 'gnus-after-exiting-gnus-hook
            (lambda () (ad-deactivate 'save-buffers-kill-emacs)))
  ;; (defun my-reset-gmail-server()
    ;; (gnus-server-close-server "nnimap:gmail"))
  ;; (add-hook 'gnus-get-new-news-hook
            ;; 'my-reset-gmail-server)


  ;; change gnus gmail links to All Mail links when tasks
  ;; must use org-capture for this to work
  (defun dem/replace()
    (interactive)
    (goto-char 1)
    (setq-local search-invisible t)
    (replace-string "gnus:INBOX" "gnus:%5BGmail%5D/All%20Mail"))

  (add-hook 'org-capture-prepare-finalize-hook 'dem/replace)

  ;; BBDB v3
  (use-package bbdb-loaddefs
    :load-path "~/.emacs.d/elisp/bbdb-3.1.2/lisp/"
    :init
    (use-package bbdb)
    (add-hook
   'gnus-summary-mode-hook
   (lambda ()
     (define-key gnus-summary-mode-map (kbd ";") 'bddb-mua-edit-field)
     ))
    :config
    (setq bbdb-print-text-path "~/.emacs.d/elisp/bbdb-3.1.2")
    (bbdb-initialize 'gnus 'message)
    (bbdb-mua-auto-update-init 'gnus 'message)
    (setq bbdb-mua-pop-up-window-size 0.1)
    (setq bbdb-mua-update-interactive-p '(query . create))
    (setq bbdb-message-all-addresses t))
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
  ;; helm
  ;;(add-to-list 'load-path "~/git/emacs-async")
  (use-package helm-config
    :demand t
    :load-path "~/git/helm"		
    :config
    (use-package helm-mode
      :load-path "~/git/helm"		
      :init
      (activate-input-method "latin-9-prefix")
      (helm-mode 1))
    :init
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "M-x") 'helm-M-x))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
    ;; projectile
    (use-package projectile
      :ensure t
      :config
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (projectile-mode +1))

    (use-package helm-projectile
      :config
      (helm-projectile-on))
#+END_SRC

#+RESULTS:
: t

** CEDET
We are not using CEDET at present, but using company mode and semantic mode.  Turn on semantic mode here.

#+BEGIN_SRC emacs-lisp
  (semantic-mode 1)
  ;; (require 'cedet-global)
  ;; (when (cedet-gnu-global-version-check t)
  ;;   (semanticdb-enable-gnu-global-databases 'java-mode))
#+END_SRC

** Iedit
Iedit is a way to refactor names in a file.

#+BEGIN_SRC emacs-lisp
(use-package iedit
:config
(define-key global-map (kbd "C-c ;") 'iedit-mode))
#+END_SRC

** Auto-complete
We are using company mode instead of auto-complete for now.

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :disabled t
    :config
    (ac-config-default))

  ;; (defun my/add-semantic-to-autocomplete()
  ;;   (add-to-list 'ac-sources 'ac-source-semantic))
  ;; (add-hook 'c-mode-common-hook 'my/add-semantic-to-autocomplete)
  ;; (add-hook 'java-mode-hook 'my/add-semantic-to-autocomplete)
#+END_SRC

** Misc packages

#+BEGIN_SRC emacs-lisp
  ;; my elisp files from "Writing GNU Emacs Extensions"
  (use-package extensions
    :load-path "~/.emacs.d/elisp")
  (use-package timestamp
    :load-path "~/.emacs.d/elisp")
  ;; imenu-list
  (use-package imenu-list
    :config
    (setq imenu-list-position 'left))
   
  ;; IRC
  (use-package erc
               :config
               (setq erc-autojoin-channels-alist '((".*\\.freenode.net"
                                                    "#org-mode"
                                                    "#emacs"
                                                    "#android"
                                                    "#android-dev"))))


  ;; multiple cursors (package installed)
  (use-package multiple-cursors
    :init
    (global-set-key (kbd "C-S-c C-S-C") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))


  ;; ispell
  (setq ispell-program-name "/usr/local/bin/ispell")

  ;; some other packages
  (use-package olivetti :defer t)
  (use-package htmlize :defer t)
  (use-package cider :defer t)

  ;; Proper title capitalization function
  ;; Now just use Karls Voigt's improved version in ~/.emacs.d/elisp
  (use-package title-capitalization
    :load-path "~/emacs.d/elisp")
  
  ;; C-sharp mode
  (use-package csharp-mode)

  ;; twittering-mode
  (use-package twittering-mode
    :config (setq twittering-use-master-password t)
    :load-path "~/git/twittering-mode/")

  ;; for forecast-mode, darksky.net api key
  (use-package forecast
    :demand t
    :config
    ;; darksky.net api key
    (setq forecast-api-key "1806e2e569afcd58feb6a8568e0857ba"))

  ;; try calfw calendar
  (use-package calfw
    :load-path "~/git/emacs-calfw"
    :init
    (use-package calfw-org))

  ;; Hydra
  (use-package hydra
    :disabled t
    :load-path "~/git/hydra")

  ;; (defhydra hydra-zoom (global-map "<f2>")
  ;;   "zoom"
  ;;   ("g" text-scale-increase "in")
  ;;   ("l" text-scale-decrease "out"))
  
  ;; auctex
  (use-package tex-mode)

  ;; graphviz dot mode
  ;; seems broken in emacs 26 master branch for now
  (use-package graphviz-dot-mode
    :disabled t
    :ensure t)
#+END_SRC

** Programming
*** General

#+BEGIN_SRC emacs-lisp
  ;; compile buffer scrolls
  (setq compilation-scroll-output t)
#+END_SRC

*** Clojure

#+BEGIN_SRC emacs-lisp
  ;; Clojure stuff taken from https://github.com/flyingmachine/emacs-for-clojure/blob/master/init.el

  (defvar clojure-packages
    '(paredit
      clojure-mode
      clojure-mode-extra-font-locking
      smex
      rainbow-delimiters
      tagedit
      ))
  (dolist (p clojure-packages)
    (when (not (package-installed-p p))
      (package-install p)))
#+END_SRC

*** Ruby

#+BEGIN_SRC emacs-lisp
  ;; set up xiki
  ;; Use rvm to manage ruby versions
  (use-package rvm
    :disabled t
    :load-path "~/.emacs.d/rvm/"
    :config
    (rvm-use-default))
  ;; If you want to play with Xiki, go
  ;; to ~/.emacs.d/elisp/start-xiki.el
  ;; and M-x eval-buffer

  ;; this package needed to make rvm work in Emacs
  (use-package rvm
    :ensure t
    :config
    (rvm-use-default))
#+END_SRC

*** Lisp

#+BEGIN_SRC emacs-lisp
  ;; MIT-Scheme
  (setq scheme-program-name "mit-scheme")
  (setenv "MITSCHEME_LIBRARY_PATH" "/usr/local/lib/mit-scheme-c")

  ;; Common Lisp
  (setq inferior-lisp-program "clisp")
#+END_SRC

*** Swift

#+BEGIN_SRC emacs-lisp
    (use-package swift-mode)
    ;; xcode documentation -- Doesn't work
    ;; (use-package xcode-document-viewer
    ;;   :load-path "~/git/emacs-xcode-document-viewer"
    ;;   :init
    ;;   (use-package anything
    ;;     :ensure t)
    ;;   :config
    ;;   (setq xcdoc:document-path "/Applications/Xcode.app/Contents/Developer/Documentation/DocSets/com.apple.adc.documentation.docset")
    ;;   (setq xcdoc:open-w3m-other-buffer t))


    ;; fix for yas-snippet breaking term-mode TABS
    ;; see https://github.com/joaotavora/yasnippet/issues/289
    (add-hook 'term-mode-hook (lambda()
                                (yas-minor-mode -1)))

    ;; swift-mode to use company-mode by default
    (add-hook 'swift-mode-hook (lambda()
                                 (company-mode t)))
    ;; xcode-mode -- doesn't work with Xcode 8 yet
    ;; (use-package xcode-mode
    ;;     :load-path "~/git/xcode-mode"
    ;;    :ensure t)

    ;; figure out if .h files are C or Objective C
    ;; (add-to-list 'magic-mode-alist
    ;; 	     `(,(lambda ()
    ;; 		  (and (string= (file-name-extension buffer-file-name) "h")
    ;; 		       (re-search-forward "@\\<interface\\>"
    ;; 					  magic-mode-regexp-match-limit t)))
    ;; 	       . objc-mode))
  ;; From https://www.danielde.dev/blog/emacs-for-swift-development
  (defun xcode-build()
    (interactive)
    (shell-command-to-string
      "osascript -e 'tell application \"Xcode\"' -e 'set targetProject to active workspace document' -e 'build targetProject' -e 'end tell'"))
  (defun xcode-run()
    (interactive)
    (shell-command-to-string
      "osascript -e 'tell application \"Xcode\"' -e 'set targetProject to active workspace document' -e 'stop targetProject' -e 'run targetProject' -e 'end tell'"))
  (defun xcode-test()
    (interactive)
    (shell-command-to-string
      "osascript -e 'tell application \"Xcode\"' -e 'set targetProject to active workspace document' -e 'stop targetProject' -e 'test targetProject' -e 'end tell'"))
  (global-set-key (kbd "s-b") 'xcode-build)
  (global-set-key (kbd "s-r") 'xcode-run)
  (global-unset-key (kbd "s-u")) ;originally bound to revert-buffer
  (global-set-key (kbd "s-u") 'xcode-test)

  (defun xcode-open-current-file()
  (interactive)
  (shell-command-to-string
    (concat "open -a \"/Applications/Xcode.app\" " (shell-quote-argument (buffer-file-name)))))
  (global-set-key (kbd "C-c p x x") 'xcode-open-current-file)


#+END_SRC
*** Company mode

#+BEGIN_SRC emacs-lisp
(use-package company
:config
    (add-hook 'prog-mode-hook 'company-mode)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (setq company-transformers '(company-sort-by-occurrence)))

;; company-sourcekit for Swift programming
(use-package company-sourcekit
:config
    (add-to-list 'company-backends 'company-sourcekit))
    
(defun my-company-after-completion-hook (&rest _ignored)
  (delete-trailing-whitespace))

;; or setq-local in a mode hook
(setq company-after-completion-hook #'my-company-after-completion-hook)
#+END_SRC

*** Yasnippet

#+BEGIN_SRC emacs-lisp
  ;; yasnippet
  (use-package yasnippet
    :load-path "~/git/yasnippet"
    :config
    (yas-global-mode 1))
#+END_SRC

*** Rust

#+BEGIN_SRC emacs-lisp
(use-package rust-mode)
(use-package cargo
  :config
  (add-hook 'rust-mode-hook 'cargo-minor-mode))
#+END_SRC

** Deft
#+BEGIN_SRC emacs-lisp
  (use-package deft
  :after org 
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
  (deft-use-filename-as-title t)
  (deft-default-extension "org")
  (deft-directory "~/Documents/org-roam/"))
#+END_SRC

** Zetteldeft

#+BEGIN_SRC emacs-lisp
(use-package avy)
(use-package zetteldeft
    :disabled t
    :after deft
    :config
        (zetteldeft-set-classic-keybindings))
#+END_SRC

** Org-roam

#+BEGIN_SRC emacs-lisp
    (use-package org-roam
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory "~/Documents/org-roam/")
      :config
      (org-roam-db-autosync-enable)
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n i" . org-roam-node-insert))
      :config
      (setq org-roam-node-display-template
          (concat "${title} "
                  (propertize "${tags:10}" 'face 'org-tag)))
      (org-roam-setup))
#+END_SRC

** Auctex

#+BEGIN_SRC emacs-lisp
  (use-package tex
      :ensure auctex)
#+END_SRC

** Errors
Fix error in loading packages in emacs 27.2
See https://emacs.stackexchange.com/questions/68288/error-retrieving-https-elpa-gnu-org-packages-archive-contents
#+BEGIN_SRC emacs-lisp
  (when (and (equal emacs-version "27.2")
             (eql system-type 'darwin))
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
#+END_SRC
** Disabled packages

#+BEGIN_SRC emacs-lisp
  ;; put time and day in mode-line (good for full screen Emacs)
  ;; (setq display-time-day-and-date t)
  ;; (display-time-mode t)
#+END_SRC

